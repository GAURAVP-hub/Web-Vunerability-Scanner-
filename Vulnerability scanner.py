import requests
from urllib.parse import urljoin, urlparse
from bs4 import BeautifulSoup

class WebVulnerabilityScanner:
 def __init__(self, base_url):
   self.base_url = base_url
   self.visited_links = set()
   self.vulnerabilities = []

 def crawl(self, url=None):
   if not url:
     url = self.base_url
   if url in self.visited_links:
     return
   self.visited_links.add(url) 
 
   try:
     response = requests.get(url)
     response.raise_for_status()
     print(f"Crawling: {url}")
   except requests.RequestException as e:
     print(f"Failed to access {url}: {e}")
     return

   soup = BeautifulSoup(response.text, 'html.parser')
   for link in soup.find_all("a", href=True):
     full_url = urljoin(self.base_url, link['href'])
     if self.is_same_domain(full_url):
       self.crawl(full_url) 

 def is_same_domain(self, url):
   return urlparse(url).netloc == urlparse(self.base_url).netloc

 def scan_for_vulnerabilities(self):
   print("Scanning for vulnerabilities...")
   for link in self.visited_links:
     self.check_sql_injection(link)
     self.check_xss(link)
   print("Scanning complete.")

 def check_sql_injection(self, url):
   test_url = f"{url}?" if "?" not in url else f"{url}&"
   test_url += "test='"
   try:
     response = requests.get(test_url)
     if "SQL" in response.text or "syntax" in response.text:
       print(f"Potential SQL Injection vulnerability found at {url}")
       self.vulnerabilities.append({"url": url, "type": "SQL Injection"})
   except requests.RequestException as e:
     print(f"Failed to test SQL Injection on {url}: {e}")

 def check_xss(self, url):
   payload = "<script>alert('XSS')</script>"
   try:
     response = requests.get(url, params={"test": payload})
     if payload in response.text:
       print(f"Potential XSS vulnerability found at {url}")
       self.vulnerabilities.append({"url": url, "type": "XSS"})
   except requests.RequestException as e:
     print(f"Failed to test XSS on {url}: {e}")

 def generate_report(self):
   print("\nVulnerability Report:")
   for vulnerability in self.vulnerabilities:
     print(f"- {vulnerability['type']} found at {vulnerability['url']}")

if __name__ == "__main__":
 base_url = input("Enter the base URL of the website to scan: ").strip()
 scanner = WebVulnerabilityScanner(base_url)
 scanner.crawl()
 scanner.scan_for_vulnerabilities()
 scanner.generate_report()





